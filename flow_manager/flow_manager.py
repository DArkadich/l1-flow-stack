import os, time, sqlite3
import ccxt
from pydantic import BaseModel, Field
from telegram import Bot

DB_PATH = "/app/shared/ledger.db"

class Cfg(BaseModel):
    key: str = Field(..., alias="BYBIT_API_KEY")
    sec: str = Field(..., alias="BYBIT_API_SECRET")
    acct: str = Field(..., alias="BYBIT_ACCOUNT_TYPE")
    tg_token: str = Field(..., alias="TG_BOT_TOKEN")
    tg_chat: str = Field(..., alias="TG_CHAT_ID")
    start_base: float = Field(..., alias="L1_START_BASE_USDT")
    pnl_thr: float = Field(..., alias="L1_PNL_THRESHOLD_TO_L2")
    export_share: float = Field(..., alias="L1_PNL_EXPORT_SHARE")
    enable_transfer: bool = Field(..., alias="BYBIT_ENABLE_AUTO_TRANSFER")
    sub_l2: str = Field("", alias="BYBIT_L2_SUBACCOUNT_ID")
    asset: str = Field("USDT", alias="BYBIT_TRANSFER_ASSET")

cfg = Cfg(**os.environ)
bot = Bot(token=cfg.tg_token)
ex = ccxt.bybit({"apiKey": cfg.key, "secret": cfg.sec, "enableRateLimit": True, "options": {"defaultType": "unified"}})

def tg(msg: str):
    try: bot.send_message(chat_id=cfg.tg_chat, text=msg[:4000], disable_web_page_preview=True)
    except Exception as e: print("TG error:", e)

def sql_conn():
    con = sqlite3.connect(DB_PATH)
    return con

def total_equity():
    bal = ex.fetch_balance(params={"type":"unified"})
    return float(bal.get("total", {}).get("USDT", 0.0))

def available_usdt():
    bal = ex.fetch_balance(params={"type":"unified"})
    return float(bal.get("free", {}).get("USDT", 0.0))

def auto_transfer_to_sub(amount_usdt: float) -> str:
    # –í–∞—Ä–∏–∞–Ω—Ç—ã: –ø–µ—Ä–µ–≤–æ–¥ –≤ —Å—É–±–∞–∫–∫–∞—É–Ω—Ç –ø–æ API. –í ccxt => transfer()
    # fromAccount/toAccount –∑–Ω–∞—á–µ–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã –¥–ª—è –±–∏—Ä–∂–∏; –∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º "UNIFIED" -> "UNIFIED_SUBACCOUNT"
    # –¢—Ä–µ–±—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—É–±–∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –ø—Ä–∞–≤ –∫–ª—é—á–∞ –≤ Bybit!
    try:
        params = {
            "transferId": ex.uuid(),
            "fromSubAccountId": None,
            "toSubAccountId": cfg.sub_l2,
        }
        res = ex.transfer(cfg.asset, amount_usdt, "UNIFIED", "UNIFIED", params)  # Bybit –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ subAccountId –≤ params
        return f"OK:{res}"
    except Exception as e:
        return f"ERR:{e}"

def main():
    tg("üß≠ Flow-manager –∑–∞–ø—É—â–µ–Ω.")
    # –±–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏—Ä–æ—Å—Ç L1 vs —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –±–∞–∑–∞; –µ—Å–ª–∏ > –ø–æ—Ä–æ–≥–∞ ‚Äî —ç–∫—Å–ø–æ—Ä—Ç —á–∞—Å—Ç–∏ –ø—Ä–∏–±—ã–ª–∏ –≤ L2
    while True:
        try:
            con = sql_conn()
            eq = total_equity()
            start = cfg.start_base
            # –ø—Ä–∏–±—ã–ª—å L1 –∫–∞–∫ (equity - start) ‚Äî –≤ –ø—Ä–æ—Å—Ç–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ, —Ç.–∫. L1 ‚Äî –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å –∫–∞–ø–∏—Ç–∞–ª–∞ –≤ —ç—Ç–æ–º —Å—Ç–µ–∫–µ
            pnl = max(0.0, eq - start)
            thr_val = start * cfg.pnl_thr
            if pnl >= thr_val:
                export_amt = pnl * cfg.export_share
                export_amt = max(0.0, min(export_amt, available_usdt()))
                if export_amt >= 10:  # –Ω–µ –≥–æ–Ω—è–µ–º –∫–æ–ø–µ–π–∫–∏
                    if cfg.enable_transfer and cfg.sub_l2:
                        res = auto_transfer_to_sub(export_amt)
                        status = "‚úÖ" if res.startswith("OK:") else "‚ö†Ô∏è"
                        tg(f"{status} –ê–≤—Ç–æ-–ø–µ—Ä–µ–≤–æ–¥ {export_amt:.2f} {cfg.asset} –∏–∑ L1 ‚Üí L2 (—Å—É–±–∞–∫–∫–∞—É–Ω—Ç {cfg.sub_l2}). –†–µ–∑—É–ª—å—Ç–∞—Ç: {res[:200]}")
                    else:
                        # –ß—ë—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–∞ —Ä—É—á–Ω–æ–π –ø–µ—Ä–µ–≤–æ–¥ (–µ—Å–ª–∏ –∞–≤—Ç–æ –æ—Ç–∫–ª—é—á—ë–Ω)
                        tg(
                            f"üì§ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω –ø–µ—Ä–µ–≤–æ–¥ –≤ L2: {export_amt:.2f} {cfg.asset}\n"
                            f"–ü—Ä–∏—á–∏–Ω–∞: L1 –ø—Ä–∏—Ä–æ—Å –Ω–∞ {pnl:.2f} USDT (–ø–æ—Ä–æ–≥ {thr_val:.2f}).\n"
                            f"–î–µ–π—Å—Ç–≤–∏–µ: –í—ã–ø–æ–ª–Ω–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä –Ω–∞ Bybit –≤ —Å—É–±–∞–∫–∫–∞—É–Ω—Ç L2 –∏–ª–∏ –Ω–∞ –±–∏—Ä–∂—É/–∫–æ—à–µ–ª—ë–∫ L2.\n"
                            f"–ü–æ–¥—Å–∫–∞–∑–∫–∞: Bybit ‚Üí Assets ‚Üí Transfer ‚Üí From: Unified(Main) ‚Üí To: SubAccount(L2) ‚Üí {cfg.asset} ‚Üí {export_amt:.2f}"
                        )
                    # –û–±–Ω–æ–≤–ª—è–µ–º ¬´—Å—Ç–∞—Ä—Ç–æ–≤—É—é –±–∞–∑—É¬ª –ø–æ–¥ –Ω–æ–≤—É—é —Å—Ç—É–ø–µ–Ω—å, —á—Ç–æ–±—ã –∫–æ–º–ø–∞—É–Ω–¥ –ø—Ä–æ–¥–æ–ª–∂–∞–ª—Å—è
                    new_start = start + export_amt
                    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state
                    con.execute("CREATE TABLE IF NOT EXISTS state(k TEXT PRIMARY KEY, v TEXT)")
                    con.execute("INSERT OR REPLACE INTO state(k,v) VALUES(?,?)", ("L1_START_BASE_USDT", str(new_start)))
                    con.commit()
                    cfg.start_base = new_start
            con.close()
            time.sleep(300)
        except Exception as e:
            tg(f"‚ùóÔ∏èFlow-manager error: {e}")
            time.sleep(10)

if __name__ == "__main__":
    main()
