#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ Grid Trading –±–æ—Ç–∞
"""

import sys
import os
sys.path.append('/app')

from main import GridConfig, GridManager

def test_grid_creation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–æ–∫"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º Grid Trading Bot")
    
    # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = GridConfig()
    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {len(config.symbols)} –ø–∞—Ä")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä—ã
    for i, symbol in enumerate(config.symbols, 1):
        print(f"  {i}. {symbol}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∫–∏ –¥–ª—è DOGE/USDT
    symbol = "DOGE/USDT"
    current_price = 0.22  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞
    
    print(f"\nüìä –°–æ–∑–¥–∞—ë–º —Å–µ—Ç–∫—É –¥–ª—è {symbol}")
    print(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price}")
    print(f"‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {config.grid_levels} —É—Ä–æ–≤–Ω–µ–π, {config.grid_spread*100}% —Å–ø—Ä–µ–¥")
    
    # –°–æ–∑–¥–∞—ë–º Grid Manager
    grid_manager = GridManager(None, config)
    
    # –°–æ–∑–¥–∞—ë–º —Å–µ—Ç–∫—É
    grid_manager.create_grid(symbol, current_price)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å–µ—Ç–∫—É
    if symbol in grid_manager.grids:
        grid = grid_manager.grids[symbol]
        print(f"\nüìà –°–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {len(grid)} —É—Ä–æ–≤–Ω–µ–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏ –ø–æ–∫—É–ø–∫–∏
        buy_levels = [level for level in grid if level["side"] == "buy"]
        sell_levels = [level for level in grid if level["side"] == "sell"]
        
        print(f"\nüü¢ –£—Ä–æ–≤–Ω–∏ –ø–æ–∫—É–ø–∫–∏ ({len(buy_levels)}):")
        for level in buy_levels:
            price = level["price"]
            amount = level["amount"]
            usdt_value = price * amount
            print(f"  ${price:.6f} ‚Üí {amount:.4f} {symbol.split('/')[0]} (${usdt_value:.2f})")
        
        print(f"\nüî¥ –£—Ä–æ–≤–Ω–∏ –ø—Ä–æ–¥–∞–∂–∏ ({len(sell_levels)}):")
        for level in sell_levels:
            price = level["price"]
            amount = level["amount"]
            usdt_value = price * amount
            print(f"  ${price:.6f} ‚Üí {amount:.4f} {symbol.split('/')[0]} (${usdt_value:.2f})")
        
        # –†–∞—Å—á—ë—Ç –æ–∂–∏–¥–∞–µ–º–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        total_investment = len(buy_levels) * config.level_amount
        expected_profit_per_trade = config.level_amount * config.grid_spread
        
        print(f"\nüí∞ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: ${total_investment:.2f}")
        print(f"üìà –ü—Ä–∏–±—ã–ª—å –∑–∞ —Å–¥–µ–ª–∫—É: ${expected_profit_per_trade:.2f}")
        print(f"üìä ROI –∑–∞ —Å–¥–µ–ª–∫—É: {(config.grid_spread * 100):.1f}%")
        
        # –û—Ü–µ–Ω–∫–∞ –¥–Ω–µ–≤–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        trades_per_day = 8  # –ü—Ä–∏–º–µ—Ä–Ω–æ 8 —Å–¥–µ–ª–æ–∫ –≤ –¥–µ–Ω—å –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        daily_profit = expected_profit_per_trade * trades_per_day
        daily_roi = (daily_profit / total_investment) * 100
        
        print(f"\nüéØ –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:")
        print(f"  üìÖ –ó–∞ –¥–µ–Ω—å: ${daily_profit:.2f} ({daily_roi:.1f}%)")
        print(f"  üìÖ –ó–∞ –º–µ—Å—è—Ü: ${daily_profit * 30:.2f} ({(daily_roi * 30):.1f}%)")
        
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç–∫–∏")

if __name__ == "__main__":
    test_grid_creation()
